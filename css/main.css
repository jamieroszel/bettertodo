/*setting up color variables*/
/*The :root CSS pseudo-class matches the root element of a tree representing the document.*/
/*A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). For example, :hover can be used to change a button's color when the user's pointer hovers over it.*/
/*https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes*/
:root {
  --clr-primary: rgb(54, 112, 199);
  --clr-light: #f4f4f4;
  --clr-dark: #333;
  --clr-warning: rgb(99, 36, 36);
}

/* The * selector selects all elements.*/
/* The ::before selector inserts something before the content of each selected element(s).*/
/* The ::after selector inserts something after the content of each selected element(s).*/
/* inherit means that the element inherits this property from its parent element.*/
/* When you set the width/height of an element, the element often appears bigger than you have set 
(because the element's border and padding are added to the element's specified width/height). 
The box-sizing property allows us to include the padding and border in an element's total width and height.
If you set box-sizing: border-box; on an element, padding and border are included in the width and height*/
*,
*::before,
*::after {
  font-family: inherit;
  box-sizing: border-box;
}

/*rem is relative to the font size of the root element*/
body {
  margin: 0;
  font-family: "Work Sans", sans-serif;
  font-weight: 300;
  font-size: 1.5rem;
  background-color: var(--clr-primary);
  color: var(--clr-light);

  /*The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.*/
  /*MDN defines the fr unit as a unit which represents a fraction of the available space in the grid container.*/
  display: grid;
  grid:
    "header header header header" auto
    "...... lists  active ......" auto /
    1fr minmax(100px, 300px) minmax(250px, 500px) 1fr;
}

/*	Relative to 1% of the width of the viewport (the browser window size)*/
.title {
  grid-area: header;
  text-align: center;
  font-size: calc(7vw + 2rem);
  font-weight: 900;
  color: rgba(0, 0, 0, 0.1);
  letter-spacing: 2px;
  margin: -0.1em 0 0.5em;
}

.all-tasks {
  grid-area: lists;
}

.task-list {
  font-size: 1.2rem;
  /*The line-height CSS property sets the height of a line box. It's commonly used to set the distance between lines of text.*/
  line-height: 1.7;
  list-style: circle;
  padding-left: 1.1em;
}

.list-name {
  cursor: pointer;
}

.list-name:hover {
  opacity: 0.7;
}

form {
  display: flex;
}

.btn {
  cursor: pointer;
  background: 0;
  border: 0;
  padding: 0;
  color: inherit;
}

.btn.create {
  font-size: 1.5rem;
  font-weight: 900;
  margin-right: 0.25em;
  transition: opacity 250ms ease-in;
}

.btn.create:hover {
  opacity: 0.7;
}

.btn.delete {
    opacity: 0.7;
    font-size: 1rem;
    transition: color 200ms;
}

.btn.delete:hover {
    color: var(--clr-warning)
}

.new {
  background: transparent;
  border: 0;
  color: inherit;
  border-bottom: 1px solid currentColor;
  font-size: inherit;
  outline: none;
  padding: 0.25em;
  transition: border-bottom 150ms ease-in;
  order: 2;
}

.new::placeholder {
    opacity: 0.4;
}

.new:focus {
  border-bottom-width: 3px;
}

.new:focus::placeholder {
  opacity: 0.15;
}

new.task, 
.new.list {
    padding: 0.25em;
}

.new.list {
  font-size: 1.1rem;
}

.new.task {
    margin-bottom: 0;
}

.active-list {
  font-weight: 700;
}

.todo-list {
  /*locally scoped custom property bc it's the only time it's used*/
  --spacer: 2rem;

  grid-area: active;
  background: var(--clr-light);
  color: var(--clr-dark);
}

.todo-header {
  padding: var(--spacer);
  background: #e4e4e4;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.list-title {
  margin: 0 1em 0 0;
}

.task-count {
  margin: 0;
  font-size: 1rem;
}

.todo-body {
  padding: var(--spacer);
  /*make this relative to account for the delete-stuff's position: absolute*/
  position: relative;
}

/*this styles the + next to 'new task name'*/
.new-task-creator .create {
    color: var(--clr-primary)
}

/*opacity of 0 and absolute took the checkboxes out of the flow of the document and they're not visible, but they can still
be interacted with.*/
/*checkbox wasn't given a class, so this selects all types that are checkbox*/
[type="checkbox"] {
  opacity: 0;
  position: absolute;
}

.task label {
  display: inline-flex;
  align-items: center;
  position: relative;
}

.task {
    position: relative;
    margin-bottom: 1.25em;
}

.task::after {
  content: "";
  position: absolute;
  right: 0;
  left: 0;
  bottom: -0.5em;
  height: 1px;
  background: currentColor;
  opacity: 0.1;
}

.custom-checkbox {
  --size: 0.75em;
  /*Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.*/
  display: inline-block;
  width: var(--size);
  height: var(--size);
  margin-right: var(--size);
  cursor: pointer;
  border: 2px solid currentColor;
  /*makes a circle*/
  border-radius: 50%;
  transform: scale(1);
  transition: 200ms ease-in-out;
}

.task:hover .custom-checkbox,
[type="checkbox"]:focus + label .custom-checkbox{
    transform: scale(1.2);
    color: var(--clr-primary);
}

[type="checkbox"]:checked + label .custom-checkbox {
    background: var(--clr-primary);
    border-color: var(--clr-primary);
    box-shadow: inset 0 0 0px 2px white;
}

[type="checkbox"]:checked + label {
    opacity: 0.5;
}

.task label::after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    left: 1.5em;;
    top: 50%;
    height: 3px;
    background: currentColor;
    transform: scaleX(0);
    transform-origin: right;
    /*strikethrough animation*/
    transition: transform 150ms ease-in-out;
}

/*unchecking the checkbox to undo strikethrough*/
[type="checkbox"]:checked + label::after {
    /*The scaleX() CSS function defines a transformation that resizes an element along the x-axis (horizontally).*/
    transform: scaleX(1);
    transform-origin: left;
}

.delete-stuff {
    display: flex;
    justify-content: space-evenly;
    position: absolute;
    width: 100%;
    left: 0;
    bottom: -35px;
    color: var(--clr-light);
}

